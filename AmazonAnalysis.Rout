
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # library(tidyverse)
> # library(vroom)
> # library(tidymodels)
> # library(embed)
> # library(ranger)
> # library(doParallel)
> # 
> # #112 columns
> # 
> # amazonTrain <- vroom("./train.csv")
> # amazonTest <- vroom("./test.csv")
> # amazonTrain$ACTION <- as.factor(amazonTrain$ACTION)
> # 
> # my_recipe <- recipe(ACTION~., data = amazonTrain) %>%
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
> #   step_other(all_nominal_predictors(), threshold = .001) %>%
> #   #step_dummy(all_nominal_predictors()) %>%
> #   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #%>%
> #   #step_mutate_at(all_numeric_predictors(), fn = factor)
> # 
> # # my_mod <- logistic_reg() %>%
> # #   set_engine("glm")
> # #
> # # amazon_workflow <- workflow() %>%
> # #   add_recipe(my_recipe) %>%
> # #   add_model(my_mod) %>%
> # #   fit(data = amazonTrain)
> # #
> # # amazon_preds <- predict(amazon_workflow,
> # #                         new_data = amazonTest,
> # #                         type="prob")
> # #
> # # preds <- cbind(amazonTest$id, amazon_preds$.pred_1)
> # # colnames(preds) <- c("Id","ACTION")
> # # preds <- as.data.frame(preds)
> # # vroom_write(preds, "amazon_predictions.csv", ",")
> # 
> # # my_mod <- logistic_reg(mixture = tune(),
> # #                        penalty = tune()) %>%
> # #   set_engine("glmnet")
> # 
> # my_mod <- rand_forest(mtry = tune(),
> #                       min_n = tune(),
> #                       trees = 500) %>%
> #   set_engine("ranger") %>%
> #   set_mode("classification")
> # 
> # amazon_workflow <- workflow() %>%
> #   add_recipe(my_recipe) %>%
> #   add_model(my_mod)
> # 
> # # tuning_grid <- grid_regular(penalty(),
> # #                             mixture(),
> # #                             levels = 5)
> # 
> # tuning_grid <- grid_regular(mtry(range = c(1,9)),
> #                             min_n(),
> #                             levels = 5)
> # 
> # folds <- vfold_cv(amazonTrain, v = 10, repeats = 1)
> # cl <- makePSOCKcluster(10)
> # registerDoParallel(cl)
> # CV_results <- amazon_workflow %>%
> #   tune_grid(resamples = folds,
> #             grid = tuning_grid,
> #             metrics = metric_set(roc_auc))
> # stopCluster(cl)
> # bestTune <- CV_results %>%
> #   select_best("roc_auc")
> # 
> # final_wf <- amazon_workflow %>%
> #   finalize_workflow(bestTune) %>%
> #   fit(data = amazonTrain)
> # bestTune
> # amazon_preds <- final_wf %>% predict(new_data = amazonTest, type = "prob")
> # 
> # preds <- cbind(amazonTest$id, amazon_preds$.pred_1)
> # colnames(preds) <- c("Id","ACTION")
> # preds <- as.data.frame(preds)
> # vroom_write(preds, "amazon_predictions.csv", ",")
> 
> #random forest on smote balanced data
> 
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(vroom)

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec(), readr::spec()
✖ recipes::step()   masks stats::step()
• Use suppressPackageStartupMessages() to eliminate package startup messages
> library(embed)
> library(ranger)
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> library(themis)
> 
> amazonTrain <- vroom("./train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazonTest <- vroom("./test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazonTrain$ACTION <- as.factor(amazonTrain$ACTION)
> 
> my_recipe <- recipe(ACTION~., data = amazonTrain) %>%
+   #step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_dummy(all_nominal_predictors()) %>%
+   step_normalize(all_predictors()) %>%
+   step_pca(all_predictors(), threshold=.8) %>%
+   #step_smote(all_outcomes(), neighbors = 5) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
> 
> prepped_recipe <- prep(my_recipe)
> baked <- bake(prepped_recipe, new_data = amazonTrain)
> 
> my_mod <- rand_forest(mtry = tune(),
+                       min_n = tune(),
+                       trees = 500) %>%
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(my_mod)
> 
> tuning_grid <- grid_regular(mtry(range = c(1,7)),
+                             min_n(),
+                             levels = 5)
> 
> folds <- vfold_cv(amazonTrain, v = 10, repeats = 1)
> cl <- makePSOCKcluster(10)
> registerDoParallel(cl)
> CV_results <- amazon_workflow %>%
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(roc_auc))
> stopCluster(cl)
> bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> final_wf <- amazon_workflow %>%
+   finalize_workflow(bestTune) %>%
+   fit(data = amazonTrain)
> 
> amazon_preds <- final_wf %>% predict(new_data = amazonTest, type = "prob")
> 
> preds <- cbind(amazonTest$id, amazon_preds$.pred_1)
> colnames(preds) <- c("Id","ACTION")
> preds <- as.data.frame(preds)
> vroom_write(preds, "amazon_predictions.csv", ",")
> 
> proc.time()
    user   system  elapsed 
 109.660    3.029 1997.838 
